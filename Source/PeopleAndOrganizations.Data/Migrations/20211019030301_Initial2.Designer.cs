// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeopleAndOrganizations.Data.Implementations.EntityFramework;

namespace PeopleAndOrganizations.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211019030301_Initial2")]
    partial class Initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.OrganizationName", b =>
                {
                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrganizationNameValueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Ordinal", "OrganizationId", "OrganizationNameValueId", "FromDate");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationNameValueId");

                    b.HasIndex("Ordinal", "OrganizationId", "OrganizationNameValueId", "FromDate", "ThruDate")
                        .IsUnique()
                        .HasFilter("[ThruDate] IS NOT NULL");

                    b.ToTable("OrganizationNames");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.OrganizationNameValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasFilter("[Value] IS NOT NULL");

                    b.ToTable("OrganizationNameValues");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Party", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonGender", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId", "GenderId", "FromDate", "ThruDate");

                    b.HasIndex("GenderId");

                    b.ToTable("PersonGenders");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonMaritalStatus", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId", "MaritalStatusId", "FromDate", "ThruDate");

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("PersonMaritalStatuses");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonName", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonNameValueId")
                        .HasColumnType("int");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId", "PersonNameValueId", "Ordinal", "FromDate");

                    b.HasIndex("PersonNameValueId");

                    b.HasIndex("PersonId", "PersonNameValueId", "Ordinal", "FromDate", "ThruDate")
                        .IsUnique()
                        .HasFilter("[ThruDate] IS NOT NULL");

                    b.ToTable("PersonNames");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonNameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("PersonNameTypes");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonNameValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonNameValues");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Organization", b =>
                {
                    b.HasOne("PeopleAndOrganizations.Domain.Model.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.OrganizationName", b =>
                {
                    b.HasOne("PeopleAndOrganizations.Domain.Model.Organization", "Organization")
                        .WithMany("Names")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleAndOrganizations.Domain.Model.OrganizationNameValue", "OrganizationNameValue")
                        .WithMany()
                        .HasForeignKey("OrganizationNameValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("OrganizationNameValue");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Person", b =>
                {
                    b.HasOne("PeopleAndOrganizations.Domain.Model.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonGender", b =>
                {
                    b.HasOne("PeopleAndOrganizations.Domain.Model.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleAndOrganizations.Domain.Model.Person", "Person")
                        .WithMany("Genders")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonMaritalStatus", b =>
                {
                    b.HasOne("PeopleAndOrganizations.Domain.Model.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleAndOrganizations.Domain.Model.Person", "Person")
                        .WithMany("MaritalStatuses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaritalStatus");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.PersonName", b =>
                {
                    b.HasOne("PeopleAndOrganizations.Domain.Model.Person", "Person")
                        .WithMany("Names")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleAndOrganizations.Domain.Model.PersonNameValue", "PersonNameValue")
                        .WithMany()
                        .HasForeignKey("PersonNameValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PersonNameValue");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Organization", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PeopleAndOrganizations.Domain.Model.Person", b =>
                {
                    b.Navigation("Genders");

                    b.Navigation("MaritalStatuses");

                    b.Navigation("Names");
                });
#pragma warning restore 612, 618
        }
    }
}
